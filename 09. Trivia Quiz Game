# The following code does not reflect original work, rather the result of learning via the course "100 Days of Code: The Complete Python Pro Bootcamp"

# question_model.py module

# create a class for Question that will take in the arguments for question text and question answer
class Question:
    def __init__(self, q_text, q_answer):
        self.text = q_text
        self.answer = q_answer

# data.py module

question_data = [
    {"type": "boolean", "difficulty": "easy", "category": "Science &amp; Nature",
     "question": "An average human can go two weeks without water.", "correct_answer": "False",
     "incorrect_answers": ["True"]}, {"type": "boolean", "difficulty": "easy", "category": "Science &amp; Nature",
                                      "question": "Salt is 100% composed of Sodium.", "correct_answer": "False",
                                      "incorrect_answers": ["True"]},
    {"type": "boolean", "difficulty": "easy", "category": "Science &amp; Nature",
     "question": "Igneous rocks are formed by excessive heat and pressure.", "correct_answer": "False",
     "incorrect_answers": ["True"]}, {"type": "boolean", "difficulty": "easy", "category": "Science &amp; Nature",
                                      "question": "An atom contains a nucleus.", "correct_answer": "True",
                                      "incorrect_answers": ["False"]},
    {"type": "boolean", "difficulty": "easy", "category": "Science &amp; Nature",
     "question": "An Astronomical Unit is the distance between Earth and the Moon.", "correct_answer": "False",
     "incorrect_answers": ["True"]}, {"type": "boolean", "difficulty": "easy", "category": "Science &amp; Nature",
                                      "question": "Upwelling in the ocean provides colder nutrient rich water for plants and decomposers.",
                                      "correct_answer": "True", "incorrect_answers": ["False"]},
    {"type": "boolean", "difficulty": "easy", "category": "Science &amp; Nature",
     "question": "Psychology is the science of behavior and mind.", "correct_answer": "True",
     "incorrect_answers": ["False"]}, {"type": "boolean", "difficulty": "easy", "category": "Science &amp; Nature",
                                       "question": "Celiac Disease is a disease that effects the heart, causing those effected to be unable to eat meat.",
                                       "correct_answer": "False", "incorrect_answers": ["True"]},
    {"type": "boolean", "difficulty": "easy", "category": "Science &amp; Nature",
     "question": "A plant that has a life cycle for more than a year is known as an annual.", "correct_answer": "False",
     "incorrect_answers": ["True"]}, {"type": "boolean", "difficulty": "easy", "category": "Science &amp; Nature",
                                      "question": "The Earth revolves around the Sun in one year.",
                                      "correct_answer": "True", "incorrect_answers": ["False"]}]

  # quiz_brain.py module

  class QuizBrain:

    # create a class that will take in the question list as a parameter and set question number and score to zero
    def __init__(self, q_list):
        self.question_number = 0
        self.question_list = q_list
        self.score = 0

    # create a "next question" function that will update the question based on the question number, gather the user input, and check it against the correct answer
    def next_question(self):
        current_question = self.question_list[self.question_number]
        self.question_number += 1
        user_answer = input(f"Q.{self.question_number}: {current_question.text} (True or False?):")
        self.check_answer(user_answer, current_question.answer)

    # create a function that will calculate whether there are any questions remaining
    def still_has_questions(self):
        # If question number is less than length of list, it will automatically return True
        # Whereas, if question number is larger, it will automatically return False
        return self.question_number < len(self.question_list)

    # create a function that will check if the user answer matches the correct answer and add a point to the score and inform the user of the result
    def check_answer(self, user_answer, correct_answer):
        if user_answer.lower() == correct_answer.lower():
            self.score += 1
            print("You got it right!")
        else:
            print("That's incorrect")

        print(f"Your current score is {self.score}/{self.question_number}")
        print(f"The correct answer was {correct_answer}.")
        print(" \n")

# main.py module

from question_model import Question
from data import question_data
from quiz_brain import QuizBrain

question_bank = []

# create a for loop that will iterate through the questions in question data and add the questions and answers to a list 
for question in question_data:
    question_text = question["question"]
    question_answer = question["correct_answer"]
    new_question = Question(q_text=question_text, q_answer=question_answer)
    question_bank.append(new_question)


quiz = QuizBrain(question_bank)

# create a while loop that will continuously run while there are questions remaining and present the user with a new question
while quiz.still_has_questions():
    quiz.next_question()

print("You've completed the quiz")
print(f"Your final score was {quiz.score}/{quiz.question_number}")
